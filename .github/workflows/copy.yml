# This is a basic workflow to help you get started with Actions

name: Copy Secrets

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      copyToEnvironment:
        type: environment
      dryRun:
        type: boolean
        default: true
        
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  copy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - run: |
          npm i libsodium-wrappers
          npm i octokit
      - uses: actions/github-script@v7
        env:
          envName: ${{ github.event.inputs.copyToEnvironment }}
          repoId: ${{ github.repository_id }}
          secret1: ${{ secrets.DEV_SECRET_1 }}
          dryRun: ${{ github.event.inputs.dryRun }}
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            console.log(process.env.envName, process.env.dryRun);
            return;
            const repoParts = context.payload.repository.full_name.split('/');
            const { Octokit, App } = require('octokit');
            const octokit = new Octokit({ auth: process.env["github-token"] });
            const secretList = await octokit.paginate('GET /repos/{owner}/{repo}/actions/secrets', {
              owner: repoParts[0],
              repo: repoParts[1],
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });
            console.log(secretList);
            const publicKeyResponse = await github.rest.actions.getEnvironmentPublicKey({
              repository_id: process.env.repoId,
              environment_name: process.env.envName,
            });
            console.log("Got env public key");
            const publicKey = publicKeyResponse.data.key;
            const publicKeyId = publicKeyResponse.data.key_id;

            const sodium = require('libsodium-wrappers');
            await sodium.ready;
            
            // Convert the secret and key to a Uint8Array.
            let binkey = sodium.from_base64(publicKey, sodium.base64_variants.ORIGINAL);
            let binsec = sodium.from_string(process.env.secret1);
          
            // Encrypt the secret using libsodium
            let encBytes = sodium.crypto_box_seal(binsec, binkey);
          
            // Convert the encrypted Uint8Array to Base64
            let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL);
          
            console.log(`encrypted with env ${process.env.envName} public key - and about to PUT a secret in it`)
            github.rest.actions.createOrUpdateEnvironmentSecret({
              repository_id: process.env.repoId,
              environment_name: process.env.envName,
              secret_name: 'DEV_SECRET_1',
              encrypted_value: output,
              key_id: publicKeyId,
            });
            console.log("done");


